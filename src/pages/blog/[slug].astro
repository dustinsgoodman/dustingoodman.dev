---
import { type CollectionEntry, getCollection } from 'astro:content';
import Layout from '@/layouts/base.astro';
import BlogPost from '@/components/BlogPost.astro';

export async function getStaticPaths() {
	const posts = await getCollection('blog');

	return posts.map((post) => {
		return {
			params: {
				slug: post.slug,
			},
			props: {
				post,
			},
		};
	});
}

interface Props {
	post: CollectionEntry<'blog'>;
}

const { post } = Astro.props;
const { title, description, heroImage, redirectUrl, originalArticle } =
	post.data;
const canonicalUrl = new URL(Astro.url.pathname, Astro.site).toString();
const { Content } = await post.render();
---

<Layout
	title={title}
	description={description}
	socialImage={`https://dustingoodman.dev${heroImage.src}`}
	canonicalUrl={canonicalUrl}
	redirectUrl={redirectUrl || originalArticle}
>
	<BlogPost post={post}>
		<Content />
	</BlogPost>
	<script>
		const copyButtonLabel = 'Copy Code'
		const codeBlocks = Array.from(document.querySelectorAll('pre'));
		codeBlocks.forEach((codeBlock) => {
			const wrapper = document.createElement('div');
			wrapper.style.position = 'relative';

			const copyButton = document.createElement("button");
	    copyButton.className = "copy-code";
	    copyButton.innerHTML = copyButtonLabel;

	    codeBlock.setAttribute("tabindex", "-1");
	    codeBlock.appendChild(copyButton);
	    // wrap codebock with relative parent element
	    codeBlock.parentNode?.insertBefore(wrapper, codeBlock);
	    wrapper.appendChild(codeBlock);

	    copyButton.addEventListener("click", async () => {
	      await copyCode(codeBlock, copyButton);
	    });
		});

		async function copyCode(block, button) {
	    let code = block.querySelector("code");
	    let text = code.innerText;

	    await navigator.clipboard.writeText(text);

	    // visual feedback that task is completed
	    button.innerText = "Code Copied";

	    setTimeout(() => {
	      button.innerText = copyButtonLabel;
	    }, 700);
	  }
	</script>
</Layout>
