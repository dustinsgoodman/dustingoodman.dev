---
import { Markdown } from 'astro/components';
import { BlogPost } from '../types';

export interface Props {
  post: BlogPost;
}

const { post } = Astro.props;
const isOffsite = !!post.originalArticle;

const getReadMoreText = (postSource: string | undefined) => {
  if (postSource === 'Medium') {
    return 'Read more on Medium.com';
  }

  if (postSource === 'ThisDot') {
    return 'Read more on ThisDot.co';
  }

  return 'Read more';
};

---
<a
  href={isOffsite ? post.originalArticle : post.url}
  target={isOffsite ? '_blank' : '_self'}
  class="group block p-4 rounded-xl hover:bg-gray-200"
>
  <article class="flex flex-col h-full">
    <header>
      <img src={post.heroImage} alt={post.alt} class="relative w-full h-72 mb-4" />
      <p class="text-sm text-gray-500 mb-1">{post.publishDate}</p>
      <h1 class="text-2xl text-blue-800 group-hover:text-blue-400 dark:text-sky-400 group-hover:dark:text-sky-600 m-0">{post.title}</h1>
    </header>
    <div class="text-gray-500 dark:text-gray-200 group-hover:dark:text-gray-500 flex-grow py-4">
      <Markdown content={post.description} />
    </div>
    <span class="text-blue-800 group-hover:text-blue-400 dark:text-sky-400 group-hover:dark:text-sky-600">
      {getReadMoreText(post.originalSource)} &rarr;
    </span>
  </article>
</a>
